@{from metaparser import Grammar, Rule, Option, Repeat}

grammar : preambles rule+ ENDMARKER { Grammar(t1, t0) } ;

preambles : preamble* { '\n'.join(t0) } ;

preamble : '@' CODEBLOCK { t1.string } ;

rule : NONTERMINAL ':' options ';' { Rule(t0.string, t2) } ;

options : option ( '|' option { t1 } ) *  { [t0] + t1 } ;

option : item* CODEBLOCK { Option(t0, t1.string) }
       | item*           { Option(t0, None) } ;

item : repetition | token ;

repetition : '(' options ')' '*' { Repeat(t1) }
           | token           '*' { Repeat(t0) }
           | '(' options ')' '+' { Repeat(t1, nonempty=True) }
           | token           '+' { Repeat(t0, nonempty=True) } ;

token : TERMINAL | NONTERMINAL | STRING ;