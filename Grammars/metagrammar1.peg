@{from metaparser import Grammar, Rule, Option, Repeat}

grammar : preambles rules ENDMARKER { Grammar(t1, t0) } ;

preambles : preamble preambles { t0 + '\n' + t1 }
          | preamble ;

preamble : '@' CODEBLOCK { t1.string } ;

rules : rule rules { [t0] + t1 }
      | rule       { [t0] } ;

rule : NONTERMINAL ':' options ';' { Rule(t0.string, t2) } ;

options : option '|' options  { [t0] + t2 }
        | option              { [t0] } ;

option : items CODEBLOCK { Option(t0, t1.string) }
       | items           { Option(t0, None) } ;

items : item items { [t0] + t1 }
      | item       { [t0] } ;

item : repetition | token;

repetition : '(' options ')' '*' { Repeat(t1) }
           | token           '*' { Repeat(t0) }
           | '(' options ')' '+' { Repeat(t1, nonempty=True) }
           | token           '+' { Repeat(t0, nonempty=True) } ;

token : TERMINAL | NONTERMINAL | STRING ;