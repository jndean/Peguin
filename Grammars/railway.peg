@{from railwayparsergenerator import (
    Token, ThreadID, NumThreads, Lookup, Length, Uniop, Binop, ArrayLiteral,
    ArrayTensor, ArrayRange, Let
)}

let_stmt : 'let' name '=' expression { Let(t1, t3) };

expression : expression '+' expr_ { Binop(t0, t1, t2) }
           | expression '-' expr_ { Binop(t0, t1, t2) }
           | expr_ ;

expr_ : expr_  '*'  expr__ { Binop(t0, t1, t2) }
       | expr_ '/'  expr__ { Binop(t0, t1, t2) }
       | expr_ '//' expr__ { Binop(t0, t1, t2) }
       | expr_ '%'  expr__ { Binop(t0, t1, t2) }
       | expr__ ;

expr__ : expr__ '**' atom { Binop(t0, t1, t2) }
       | atom ;

atom : '(' expression ')'  { t1 }
     | array_literal
     | array_tensor
     | array_range
     | lookup
     | NUMBER
     | threadid
     | numthreads
     | '-' atom   { Uniop(t0, t1) }
     | '!' atom   { Uniop(t0, t1) }
     | '#' lookup { Length(t1) };

array_literal : '[' ']' { ArrayLiteral([]) }
              | '[' expression (',' expression {t1})* ']'
                      { ArrayLiteral([t1] + t2) } ;

array_range : '[' expression 'to' expression ('by' expression {t1})? ']'
                    { ArrayRange(t1, t3, t4) };

array_tensor : '[' expression 'tensor' expression ']' { ArrayTensor(t1, t3) };

lookup : name ( '[' expression ']' {t1} )* { Lookup(name=t0, index=tuple(t1)) };

threadid   : 'TID'  { ThreadID()   };
numthreads : '#TID' { NumThreads() };

name : '.'? NAME { ('.' if t0 is not None else '') + t1.string };
