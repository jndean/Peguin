@{from railwayparsergenerator import (
    Token, ThreadID, NumThreads, Lookup, Length, Uniop, Binop, ArrayLiteral,
    ArrayTensor, ArrayRange, Let, Unlet, Promote, Pop, Push, Swap, If
)}

program : statement+ ENDMARKER {t0};

statement : (let_stmt | unlet_stmt | promote_stmt | swap_stmt | push_stmt |
             pop_stmt | if_stmt) NEWLINE {t0};

if_stmt : 'if' '(' expression ')' NEWLINE
              statement*
          ('else' NEWLINE
              statement* {t2} )?
          'fi' '(' expression? ')' { If(t2, t5, t6, t9) };

pop_stmt : 'pop' lookup '=>' lookup { Pop(t1, t3) }
         | 'pop' lookup '<=' lookup { Pop(t3, t1) };

push_stmt : 'push' lookup '=>' lookup { Push(t1, t3) }
          | 'push' lookup '<=' lookup { Push(t3, t1) };

swap_stmt : 'swap' lookup '<=>' lookup { Swap(t1, t3) };

promote_stmt : 'promote' lookup '=>' lookup { Promote(t1, t3) }
             | 'promote' lookup '<=' lookup { Promote(t3, t1) };

let_stmt : 'let' name ('=' expression {t1})? { Let(t1, t2) };

unlet_stmt : 'unlet' name ('=' expression {t1})? { Unlet(t1, t2) };

expression : expression '+' expr_ { Binop(t0, t1, t2) }
           | expression '-' expr_ { Binop(t0, t1, t2) }
           | expr_ ;

expr_ : expr_  '*'  expr__ { Binop(t0, t1, t2) }
       | expr_ '/'  expr__ { Binop(t0, t1, t2) }
       | expr_ '//' expr__ { Binop(t0, t1, t2) }
       | expr_ '%'  expr__ { Binop(t0, t1, t2) }
       | expr__ ;

expr__ : expr__ '**' atom { Binop(t0, t1, t2) }
       | atom ;

atom : '(' expression ')'  { t1 }
     | array_literal
     | array_tensor
     | array_range
     | lookup
     | NUMBER
     | threadid
     | numthreads
     | '-' atom   { Uniop(t0, t1) }
     | '!' atom   { Uniop(t0, t1) }
     | '#' lookup { Length(t1) };

array_literal : '[' ']' { ArrayLiteral([]) }
              | '[' expression (',' expression {t1})* ']'
                      { ArrayLiteral([t1] + t2) } ;

array_range : '[' expression 'to' expression ('by' expression {t1})? ']'
                    { ArrayRange(t1, t3, t4) };

array_tensor : '[' expression 'tensor' expression ']' { ArrayTensor(t1, t3) };

lookup : name ( '[' expression ']' {t1} )* { Lookup(name=t0, index=tuple(t1)) };

threadid   : 'TID'  { ThreadID()   };
numthreads : '#TID' { NumThreads() };

name : '.'? NAME { ('.' if t0 is not None else '') + t1.string };
